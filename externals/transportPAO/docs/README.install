
========================================
INSTALLATION PROCEDURE
========================================

NOTES: 
(i) The present version of the code adopts the installation procedure 
of the Qauntum-ESPRESSO distribution (for more details see also 
http://www.quantum-espresso.org). 

Installation is a two-step procedure:
   1. cd to the top directory of the PAOtransport tree, and issue this command at the 
      shell prompt:   ./configure [<options>]
   2. type:           make <target>

where <target> is one (or more) of the following (typicalli "all" ): 

transport, tools,
all, clean, wash. 

Running make without arguments prints a short manual. Cross-compilation
is not currently supported.

=========================
Step one: configuring
=========================

''configure'' is a GNU-style configuration script, automatically generated by GNU Autoconf. 
(If you PAOtransport to play with it, its source file is $TOPDIR/config/configure.ac; 
 you may also PAOtransport to edit $TOPDIR/config/make.sys.in) 

It generates the following files:
   $TOPDIR/make.sys          compilation settings and flags
   $TOPDIR/include/*.h       (to be included in the sources during compilation)

TO have a full description of the configuration option, type
./configure --help

To force using a particular compiler, or compilation flags, or libraries, you may 
set the appropriate environment variables when running the configuration script. 
As an example:

     ./configure F90=g95  CC=gcc CFLAGS=-O3 

Some of those environment variables are:
   TOPDIR            : top directory of the PAOtransport tree (defaults to ?pwd?)
   F90, F77, CC      : Fortran 90, Fortran 77, and C compilers
   CPP               : source file preprocessor (defaults to ?$CC -E?)
   LD                : linker (defaults to $F90)
   CFLAGS, FFLAGS, F90FLAGS, CPPFLAGS, LDFLAGS : compilation flags
   LIBDIRS           : extra directories to search for libraries (see below)

To compile serially:
  ./configure --disable-parallel

To compile using internal blas and lapack libraries
  ./configure --with-internal-libs        OR
  ./configure --with-internal-blas --with-internal-lapack

To switch on the ETSF-IO support (used to interface PAOtransport to Abinit):
  ./configure --enable-etsf-io            OR
  ./configure --with-etsf-io      


You should always be able to compile the PAOtransport suite of programs without having to 
edit any of the generated files. If you ever have to, that should be considered a 
bug in the configuration script and you are encouraged to submit a bug report.


IMPORTANT: PAOtransport can take advantage of several optimized numerical libraries:
- ESSL on AIX systems (shipped by IBM)
- MKL together with Intel compilers (shipped by Intel, free for non-commercial use)
- ATLAS (freely downloadable from http://math-atlas.sourceforge.net )
- FFTW (freely downloadable from http://www.fftw.org)

The configuration script attempts to find those libraries, but may fail if they 
have been installed in non-standard locations. You should look at the LIBS environment 
variable (either in the output of the configuration script, or in the generated make.sys) 
to check whether all available libraries were found. 

If any libraries weren't found, you can rerun the configuration script and pass it a list
of directories to search, by setting the environment variable LIBDIRS; directories 
in the list must be separated by spaces. For example:

    ./configure LIBDIRS="/opt/intel/mkl/mkl61/lib/32 /usr/local/lib/fftw-2.1.5"

If this still fails, you may set the environment variable LIBS manually and retry. 
For example:
    ./configure LIBS="-L/cineca/prod/intel/lib -lfftw -llapack -lblas"

Beware that in this case, you must specify all the libraries that you PAOtransport to link to. 
The configuration script will blindly accept the specified value, and will not search 
for any extra library.


============================
Step two: compiling
============================

Here is a list of available compilation targets:

    make transport              compile  conductor.x (step 3)
    make tools                  compile  executable in $TOPDIR/src/tools (kgrid.x, midpoint.x, etc)
    make all                             make transport + utility

    make libbase                compile  PAOtransport basic libs
    make libclibs               compile  the internal PAOtransport c-library
    make libextlibs             compile  the internal version of some std external libraries
                                         (blas, lapack, etc). It is automatically issues when those
                                         libs are not found
    make libplugins             compile  plug-ins libraries (such as NetCDF and ETSF-IO)

    make clean                  remove   Object files, libs and executables
    make clean_test             remove   test output files
    make wash                   remove   Configuration files too

IMPORTANT: If you change any compilation or precompilation option after a 
           previous (successful or failed) compilation, you must run make clean 
           before recompiling, unless you know exactly which routines are affected 
           by the changed options and how to force their recompilation.

